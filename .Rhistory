# Disconnect
dbFinDisconnect()
#################
### PULL DATA ###
#################
# Create space to save data
aData <- c()
# SEEKING ALPHA
url <- "http://seekingalpha.com/feed.xml"; siteName <- "seekingalpha.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, descTag=NA, getTicker=FALSE)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
# Motley Fool
url <- "http://www.fool.com/feeds/index.aspx?id=foolwatch&format=rss2"; siteName <- "fool.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, linkTag="guid", getTicker=TRUE)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
# Wall Street Journal
url <- "http://www.wsj.com/xml/rss/3_7031.xml"; siteName <- "wsj.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, xpath="//channel/item", linkTag="guid")
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
# Financial Times
url <- "http://www.ft.com/rss/markets"; siteName <- "ft.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, linkTag="guid")
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
# Forbes
url <- "http://www.forbes.com/markets/index.xml"; siteName <- "forbes.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
# Market Watch
url <- "http://www.marketwatch.com/rss/newsfinder/AllMarketWatchNews/?p=type&pv=Stocks%20to%20Watch&t=Stocks%20to%20Watch&dist=sr_rss"; siteName <- "marketwatch.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
# Apple.com
# url <- "http://www.apple.com/pr/feeds/pr.rss"; siteName <- "apple.com"
#xmltop <- GetTop(url)
#newsData <- ProcessTop(siteName, xmltop)
#if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
# Show data collected
head(aData); dim(aData)
####################
### PROCESS DATA ###
####################
# Sort by date and time
aData <- aData[order(aData[,"timeStamp"], decreasing=TRUE), ]
# Subset based on time
timeNow <- as.POSIXlt(Sys.time(), "America/New_York") #format(Sys.time(), "%F %H:%M:%S")
timeCutOff <- timeNow - hours(2)
aData <- aData[aData[,"timeStamp"]>timeCutOff, ]
head(aData); dim(aData)
###################################
### ADD INFORMATION TO DATABASE ###
###################################
recordsAdded <- 0
# Connect
mydb = dbConnect(MySQL(), user=myUser, password=myPassword, host=myHost)
on.exit(dbDisconnect(mydb))
rs <- dbSendQuery(mydb, "USE finance;")
# Loop and add
for(rowNr in 1:nrow(aData)) {
# Check exists
curTitle <- aData[rowNr,"title"]
query <- paste("SELECT COUNT(*) FROM basicnews WHERE title='", curTitle, "';", sep="")
rs <- dbSendQuery(mydb, query)
if(fetch(rs)==0) { exist=FALSE } else { exist=TRUE }
print(exist)
# Add if doesn't exist
if(exist==FALSE) {
dbFinAdd("basicnews", c("timestamp", "source", "title", "description", "url", "tickerTags"),
c(aData[rowNr, c("timeStamp","siteName", "title", "description", "link",  "tickers")]))
recordsAdded <- recordsAdded + 1
}
}
# Connect
mydb = dbConnect(MySQL(), user=myUser, password=myPassword, host=myHost)
on.exit(dbDisconnect(mydb))
rs <- dbSendQuery(mydb, "USE finance;")
# Add message
dbNotification("Starting news collection process", 10)
# Disconnect
dbFinDisconnect()
# Load packages
library(RMySQL)
# Connect
mydb = dbConnect(MySQL(), user='remote', password='nederland', host='ec2-54-173-22-144.compute-1.amazonaws.com')
on.exit(dbDisconnect(mydb))
# Select database
rs <- dbSendQuery(mydb, "USE finance;")
# Show notifications
noticeImportanceCutValue <- 0
#notifications <- fetch(dbSendQuery(mydb, "SELECT * FROM notification WHERE timestamp >= CURDATE();"))
notifications <- fetch(dbSendQuery(mydb, "SELECT * FROM notification;"))
notifications <- notifications[notifications[,"importance"]>noticeImportanceCutValue,]
print(tail(notifications,15))
# Test sql code
query <- "SELECT * FROM basicnews WHERE title='Veeco Instruments (VECO) John R. Peeler on Q2 2015 Results - Earnings Call Transcript';"
rs <- dbSendQuery(mydb, query)
print(fetch(rs))
# Disconnect
dbDisconnect(mydb)
# Load packages
library(RMySQL)
# Connect
mydb = dbConnect(MySQL(), user='remote', password='nederland', host='ec2-54-173-22-144.compute-1.amazonaws.com')
on.exit(dbDisconnect(mydb))
# Select database
rs <- dbSendQuery(mydb, "USE finance;")
query <- "SELECT * FROM basicnews WHERE title='Veeco Instruments (VECO) John R. Peeler on Q2 2015 Results - Earnings Call Transcript';"
#2015-08-03 22:13:02
rs <- dbSendQuery(mydb, query)
print(fetch(rs))
query <- "SELECT * FROM basicnews WHERE title='Veeco Instruments (VECO) John R. Peeler on Q2 2015 Results - Earnings Call Transcript' AND timestamp='2015-08-03 22:13:02';"
#2015-08-03 22:13:02
rs <- dbSendQuery(mydb, query)
print(fetch(rs))
query <- "SELECT * FROM basicnews WHERE title='Veeco Instruments (VECO) John R. Peeler on Q2 2015 Results - Earnings Call Transcript' AND timestamp='2015-08-03 22:13:03';"
#2015-08-03 22:13:02
rs <- dbSendQuery(mydb, query)
print(fetch(rs))
# Disconnect
dbDisconnect(mydb)
# Load packages
library(RMySQL)
# Connect
mydb = dbConnect(MySQL(), user='remote', password='nederland', host='ec2-54-173-22-144.compute-1.amazonaws.com')
on.exit(dbDisconnect(mydb))
# Select database
rs <- dbSendQuery(mydb, "USE finance;")
# Show notifications
noticeImportanceCutValue <- 0
#notifications <- fetch(dbSendQuery(mydb, "SELECT * FROM notification WHERE timestamp >= CURDATE();"))
notifications <- fetch(dbSendQuery(mydb, "SELECT * FROM notification;"))
notifications <- notifications[notifications[,"importance"]>noticeImportanceCutValue,]
print(tail(notifications,15))
# Test sql code
query <- "SELECT * FROM basicnews WHERE title='Veeco Instruments (VECO) John R. Peeler on Q2 2015 Results - Earnings Call Transcript';"
query <- "SELECT * FROM basicnews WHERE title='Veeco Instruments (VECO) John R. Peeler on Q2 2015 Results - Earnings Call Transcript' AND timestamp='2015-08-03 22:13:02';"
#2015-08-03 22:13:02
rs <- dbSendQuery(mydb, query)
print(fetch(rs))
# Disconnect
dbDisconnect(mydb)
# Load packages
library(RMySQL)
# Connect
mydb = dbConnect(MySQL(), user='remote', password='nederland', host='ec2-54-173-22-144.compute-1.amazonaws.com')
on.exit(dbDisconnect(mydb))
# Select database
rs <- dbSendQuery(mydb, "USE finance;")
# Show notifications
noticeImportanceCutValue <- 0
#notifications <- fetch(dbSendQuery(mydb, "SELECT * FROM notification WHERE timestamp >= CURDATE();"))
notifications <- fetch(dbSendQuery(mydb, "SELECT * FROM notification;"))
dbClearResult(dbListResults(mydb)[[1]])
notifications <- notifications[notifications[,"importance"]>noticeImportanceCutValue,]
print(tail(notifications,15))
# Test sql code
query <- "SELECT * FROM basicnews WHERE title='Veeco Instruments (VECO) John R. Peeler on Q2 2015 Results - Earnings Call Transcript';"
query <- "SELECT * FROM basicnews WHERE title='Veeco Instruments (VECO) John R. Peeler on Q2 2015 Results - Earnings Call Transcript' AND timestamp='2015-08-03 22:13:02';"
#2015-08-03 22:13:02
rs <- dbSendQuery(mydb, query)
print(fetch(rs))
# Disconnect
dbDisconnect(mydb)
# Load packages
library(RMySQL)
# Connect
mydb = dbConnect(MySQL(), user='remote', password='nederland', host='ec2-54-173-22-144.compute-1.amazonaws.com')
on.exit(dbDisconnect(mydb))
# Select database
rs <- dbSendQuery(mydb, "USE finance;")
# Show notifications
noticeImportanceCutValue <- 0
#notifications <- fetch(dbSendQuery(mydb, "SELECT * FROM notification WHERE timestamp >= CURDATE();"))
notifications <- fetch(dbSendQuery(mydb, "SELECT * FROM notification;"))
dbClearResult(dbListResults(mydb)[[1]])
notifications <- notifications[notifications[,"importance"]>noticeImportanceCutValue,]
print(tail(notifications,15))
# Test sql code
query <- "SELECT * FROM basicnews WHERE title='Veeco Instruments (VECO) John R. Peeler on Q2 2015 Results - Earnings Call Transcript';"
query <- "SELECT * FROM basicnews WHERE title='Veeco Instruments (VECO) John R. Peeler on Q2 2015 Results - Earnings Call Transcript' AND timestamp='2015-08-03 22:13:02';"
#2015-08-03 22:13:02
rs <- dbSendQuery(mydb, query)
print(fetch(rs))
dbClearResult(dbListResults(mydb)[[1]])
# Disconnect
dbDisconnect(mydb)
# Load packages
library(XML)
library(lubridate)
if(Sys.info()["nodename"]!="MA2") {
source("/home/finance/GitFin/dbFunctions.R")
source("/home/finance/GitFin/SourceTimeFunction.R")
source("/home/finance/GitFin/SourceNewsFunctions.R")
myHost <- "localhost"
myUser <- "finance"
myPassword <- "nederland"
} else {
source("SourceTimeFunction.R")
source("dbFunctions.R")
source("SourceNewsFunctions.R")
myHost <- "ec2-54-173-22-144.compute-1.amazonaws.com"
myUser <- "remote"
myPassword <- "nederland"
}
########################
### ADD NOTIFICATION ###
########################
# Connect
mydb = dbConnect(MySQL(), user=myUser, password=myPassword, host=myHost)
on.exit(dbDisconnect(mydb))
rs <- dbSendQuery(mydb, "USE finance;")
# Add message
dbNotification("Starting news collection process", 10)
# Disconnect
dbFinDisconnect()
# Load packages
library(XML)
library(lubridate)
if(Sys.info()["nodename"]!="MA2") {
source("/home/finance/GitFin/dbFunctions.R")
source("/home/finance/GitFin/SourceTimeFunction.R")
source("/home/finance/GitFin/SourceNewsFunctions.R")
myHost <- "localhost"
myUser <- "finance"
myPassword <- "nederland"
} else {
source("SourceTimeFunction.R")
source("dbFunctions.R")
source("SourceNewsFunctions.R")
myHost <- "ec2-54-173-22-144.compute-1.amazonaws.com"
myUser <- "remote"
myPassword <- "nederland"
}
########################
### ADD NOTIFICATION ###
########################
# Connect
mydb = dbConnect(MySQL(), user=myUser, password=myPassword, host=myHost)
on.exit(dbDisconnect(mydb))
rs <- dbSendQuery(mydb, "USE finance;")
# Add message
dbNotification("Starting news collection process", 10)
# Disconnect
dbFinDisconnect()
#################
### PULL DATA ###
#################
# Create space to save data
aData <- c()
# SEEKING ALPHA
if(T) {
url <- "http://seekingalpha.com/feed.xml"; siteName <- "seekingalpha.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, descTag=NA, getTicker=FALSE)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
# Show data collected
head(aData); dim(aData)
# Sort by date and time
aData <- aData[order(aData[,"timeStamp"], decreasing=TRUE), ]
# Subset based on time
timeNow <- as.POSIXlt(Sys.time(), "America/New_York") #format(Sys.time(), "%F %H:%M:%S")
timeCutOff <- timeNow - hours(2)
aData <- aData[aData[,"timeStamp"]>timeCutOff, ]
head(aData); dim(aData)
recordsAdded <- 0
# Connect
mydb = dbConnect(MySQL(), user=myUser, password=myPassword, host=myHost)
on.exit(dbDisconnect(mydb))
rs <- dbSendQuery(mydb, "USE finance;")
rowNr
# Check exists
curTitle <- aData[rowNr,"title"]
curTimeStamp <- aData[,rowNr,"timeStamp"]
query <- paste("SELECT COUNT(*) FROM basicnews WHERE title='", curTitle, "' AND timestamp='", curTimeStamp, "';", sep="")
rs <- dbSendQuery(mydb, query)
if(fetch(rs)==0) { exist=FALSE } else { exist=TRUE }
dbClearResult(dbListResults(mydb)[[1]])
print(exist)
curTitle <- aData[rowNr,"title"]
curTitle
curTimeStamp <- aData[,rowNr,"timeStamp"]
aData[,rowNr,"timeStamp"]
aData[rowNr,"timeStamp"]
curTimeStamp <- aData[rowNr,"timeStamp"]
query <- paste("SELECT COUNT(*) FROM basicnews WHERE title='", curTitle, "' AND timestamp='", curTimeStamp, "';", sep="")
query
rs <- dbSendQuery(mydb, query)
if(fetch(rs)==0) { exist=FALSE } else { exist=TRUE }
dbClearResult(dbListResults(mydb)[[1]])
print(exist)
# Connect
mydb = dbConnect(MySQL(), user=myUser, password=myPassword, host=myHost)
on.exit(dbDisconnect(mydb))
rs <- dbSendQuery(mydb, "USE finance;")
rs <- dbSendQuery(mydb, query)
if(fetch(rs)==0) { exist=FALSE } else { exist=TRUE }
dbClearResult(dbListResults(mydb)[[1]])
print(exist)
# Add if doesn't exist
if(exist==FALSE) {
dbFinAdd("basicnews", c("timestamp", "source", "title", "description", "url", "tickerTags"),
c(aData[rowNr, c("timeStamp","siteName", "title", "description", "link",  "tickers")]))
recordsAdded <- recordsAdded + 1
}
rs <- dbSendQuery(mydb, query)
if(fetch(rs)==0) { exist=FALSE } else { exist=TRUE }
dbClearResult(dbListResults(mydb)[[1]])
print(exist)
# Disconnect
dbFinDisconnect()
curTimeStamp
gsub(" [A-Z]{3}", "", aData[rowNr,"timeStamp"])
# Connect
mydb = dbConnect(MySQL(), user=myUser, password=myPassword, host=myHost)
on.exit(dbDisconnect(mydb))
rs <- dbSendQuery(mydb, "USE finance;")
# Check exists
curTitle <- aData[rowNr,"title"]
curTimeStamp <- gsub(" [A-Z]{3}", "", aData[rowNr,"timeStamp"])
query <- paste("SELECT COUNT(*) FROM basicnews WHERE title='", curTitle, "' AND timestamp='", curTimeStamp, "';", sep="")
rs <- dbSendQuery(mydb, query)
if(fetch(rs)==0) { exist=FALSE } else { exist=TRUE }
dbClearResult(dbListResults(mydb)[[1]])
print(exist)
# Add if doesn't exist
if(exist==FALSE) {
dbFinAdd("basicnews", c("timestamp", "source", "title", "description", "url", "tickerTags"),
c(aData[rowNr, c("timeStamp","siteName", "title", "description", "link",  "tickers")]))
recordsAdded <- recordsAdded + 1
}
}
} else {
print("no news data to add")
}
# Add if doesn't exist
if(exist==FALSE) {
dbFinAdd("basicnews", c("timestamp", "source", "title", "description", "url", "tickerTags"),
c(aData[rowNr, c("timeStamp","siteName", "title", "description", "link",  "tickers")]))
recordsAdded <- recordsAdded + 1
}
print(paste("News exists: ",exist))
# Create space to save data
aData <- c()
# SEEKING ALPHA
if(T) {
url <- "http://seekingalpha.com/feed.xml"; siteName <- "seekingalpha.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, descTag=NA, getTicker=FALSE)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
# Motley Fool
if(T) {
url <- "http://www.fool.com/feeds/index.aspx?id=foolwatch&format=rss2"; siteName <- "fool.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, linkTag="guid", getTicker=TRUE)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
# Wall Street Journal
if(T) {
url <- "http://www.wsj.com/xml/rss/3_7031.xml"; siteName <- "wsj.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, xpath="//channel/item", linkTag="guid")
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
# Financial Times
if(T) {
url <- "http://www.ft.com/rss/markets"; siteName <- "ft.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, linkTag="guid")
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
# Forbes
if(T) {
url <- "http://www.forbes.com/markets/index.xml"; siteName <- "forbes.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
# Market Watch
if(T) {
url <- "http://www.marketwatch.com/rss/newsfinder/AllMarketWatchNews/?p=type&pv=Stocks%20to%20Watch&t=Stocks%20to%20Watch&dist=sr_rss"; siteName <- "marketwatch.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
# Apple.com
# url <- "http://www.apple.com/pr/feeds/pr.rss"; siteName <- "apple.com"
#xmltop <- GetTop(url)
#newsData <- ProcessTop(siteName, xmltop)
#if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
# Show data collected
head(aData); dim(aData)
# Create space to save data
aData <- c()
# SEEKING ALPHA
if(T) {
url <- "http://seekingalpha.com/feed.xml"; siteName <- "seekingalpha.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, descTag=NA, getTicker=FALSE)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
if(T) {
url <- "http://www.fool.com/feeds/index.aspx?id=foolwatch&format=rss2"; siteName <- "fool.com"
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, linkTag="guid", getTicker=TRUE)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
?url
url <- "http://www.fool.com/feeds/index.aspx?id=foolwatch&format=rss2"; siteName <- "fool.com"
con = url(url); sourceCode = readLines(con); close(con)
xmlfile <- xmlTreeParse(sourceCode)
xmltop = xmlRoot(xmlfile)
xpath="//rss/channel/item"
nodes <- getNodeSet(xmltop, xpath)
node <- nodes[[1]]
nData <- xmlSApply(node, function(x) xmlSApply(x, xmlValue))
nData <- unlist(nData)
url <- "http://www.ft.com/rss/markets"; siteName <- "ft.com"
con = url(url); sourceCode = readLines(con); close(con)
xmlfile <- xmlTreeParse(sourceCode)
xmltop = xmlRoot(xmlfile)
nodes <- getNodeSet(xmltop, xpath)
?getNodeSet
xmlNamespaceDefinitions(xmltop, simplify = TRUE)
xmltop
xmlNamespaceDefinitions(xmltop, simplify = FALSE)
nodes <- getNodeSet(xmltop, xpath, xmlNamespaceDefinitions(xmltop, simplify = FALSE))
xmlNamespaceDefinitions(xmltop, addNames = TRUE, recursive = FALSE, simplify = FALSE)
xmlNamespaceDefinitions(xmltop, addNames = TRUE, recursive = TRUE, simplify = FALSE)
xmlNamespaces(xmltop, addNames = TRUE, recursive = TRUE, simplify = FALSE)
getNodeSet(xmltop, xpath, xmlNamespaces(xmltop, addNames = TRUE, recursive = TRUE, simplify = FALSE))
getNodeSet(xmltop, xpath)
getNodeSet(xmltop, xpath)
url
con = url(url); sourceCode = readLines(con); close(con)
xmlfile <- xmlTreeParse(sourceCode)
xmltop = xmlRoot(xmlfile)
getNodeSet(xmltop, xpath)
# Create space to save data
aData <- c()
# SEEKING ALPHA
if(T) {
url <- "http://seekingalpha.com/feed.xml"; siteName <- "seekingalpha.com"
print(paste("Now getting data from:", siteName))
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, descTag=NA, getTicker=FALSE)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
# Motley Fool
if(T) {
url <- "http://www.fool.com/feeds/index.aspx?id=foolwatch&format=rss2"; siteName <- "fool.com"
print(paste("Now getting data from:", siteName))
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, linkTag="guid", getTicker=TRUE)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
# Wall Street Journal
if(T) {
url <- "http://www.wsj.com/xml/rss/3_7031.xml"; siteName <- "wsj.com"
print(paste("Now getting data from:", siteName))
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, xpath="//channel/item", linkTag="guid")
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
# Financial Times
if(T) {
url <- "http://www.ft.com/rss/markets"; siteName <- "ft.com"
print(paste("Now getting data from:", siteName))
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop, linkTag="guid")
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
# Forbes
if(T) {
url <- "http://www.forbes.com/markets/index.xml"; siteName <- "forbes.com"
print(paste("Now getting data from:", siteName))
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
# Market Watch
if(T) {
url <- "http://www.marketwatch.com/rss/newsfinder/AllMarketWatchNews/?p=type&pv=Stocks%20to%20Watch&t=Stocks%20to%20Watch&dist=sr_rss"; siteName <- "marketwatch.com"
print(paste("Now getting data from:", siteName))
xmltop <- GetTop(url)
newsData <- ProcessTop(siteName, xmltop)
if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
}
# Apple.com
# url <- "http://www.apple.com/pr/feeds/pr.rss"; siteName <- "apple.com"
#print(paste("Now getting data from:", siteName))
#xmltop <- GetTop(url)
#newsData <- ProcessTop(siteName, xmltop)
#if(CheckNewsData(newsData, siteName)==TRUE) { aData <- rbind(aData, newsData) }
# Show data collected
head(aData); dim(aData)
# Sort by date and time
aData <- aData[order(aData[,"timeStamp"], decreasing=TRUE), ]
# Subset based on time
timeNow <- as.POSIXlt(Sys.time(), "America/New_York") #format(Sys.time(), "%F %H:%M:%S")
timeCutOff <- timeNow - hours(2); print(paste("Cut off time:", timeCutOff))
aData <- aData[aData[,"timeStamp"]>timeCutOff, ]
head(aData); dim(aData)
aData[,"timeStamp"]
timeCutOff
timeCutOff
